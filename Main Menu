# MENU/USER INPUT

prime1 = generate_prime()
prime2 = generate_prime()

phi = gen_phi(prime1, prime2)
e = find_e(phi)
n = gen_n(prime1,prime2)
d = generate_private_key(e,phi)

cipher_list = []
#main menu
print("RSA keys have been generated.")
while True:
    
    print("Please select your user type:")
    print("1. A public user")
    print("2. The owner of the keys")
    print("3. Exit program")

    user_type = input("Enter your choice: ")
    print()

    if user_type == "1":
        #public user menu
        while True:
            print("As a public user, what would you like to do?")
            print("1. Send an encrypted message")
            print("2. Authenticate a digital signature")
            print("3. Exit")

            choice = input("Enter your choice: ")
            print()

            if choice == "1":
                #call the function to send an encrypted message
                message = input("Enter a message: ")
                cypher = encrypt_message(message,e,n)
                cipher_list.append(cypher)
                print("Message encrypted and sent.")
                print()

            elif choice == "2":
                
                if signatures_received:
                    #display available signatures
                    print("The following messages are available:")
                    for index, message in enumerate(signatures_received.keys(), start=1):
                        print(f"{index}. {message}")
                    
                    #ask the user to select a signature to authenticate
                    selected_index = int(input("Enter your choice: ")) - 1
                    selected_message = list(signatures_received.keys())[selected_index]
                    
                    #retrieve the corresponding signature S from the dictionary
                    S = signatures_received[selected_message]

                    #call the authentication function
                   
                    is_signature_valid = authenticate_signature(S, e, n, selected_message)

                    if is_signature_valid:
                        print("Signature is valid.")
                    else:
                        print("Signature is not valid.")
                        signature_choice = input("Enter your choice: ")

                else:
                    print("There are no signatures to authenticate.")
                
                """for message, count in signatures_received.items():
                    print(f"Message '{message}'")"""
                
            elif choice == "3":
                break 
            
    # Option 2 - The owner of the keys
    elif user_type == "2":
        while True:
            print("As the owner of the keys, what would you like to do?")
            print("1. Decrypt a received message")
            print("2. Digitally sign a message")
            print("3. Show the keys")
            print("4. Generating a new set of keys")
            print("5. Exit")

            o_choice = input("Enter your choice: ")
            print()

            if o_choice == "1":
                if(len(cipher_list) == 0):
                        print("No messages to decrypt yet")
                        print()
                else:
                    print("The following messages are available:")
                    ind = 1
                    for x in cipher_list:
                        print(ind, '. ( Message Length: ', len(x),' )')
                        ind += 1
                        
                    message_choice = int(input("Enter your choice: "))
                    print()

                    decrypt = decrypt_message(cipher_list[message_choice - 1], d, n)
                    
                    print("Decrypted message:")
                    print(decrypt)
                    print()

            elif o_choice == "2":
               
                message = input('Enter a message: ')
                S = sign_message(message, d, n)  
               
                if message not in signatures_received:
                    signatures_received[message] = [S]
                else:
                    signatures_received[message].append(S)
                print("Message signed and sent.")
                print()

            elif o_choice == "3":
                
                print("Key information:")
                
                print('Public Key: (',e,', ', n,' )')
                print('Private Key: ( ', d, ' )')
                print()

            elif o_choice == "4":
                print("Generating...")
                e = find_e(phi)
                d = generate_private_key(e, phi)
                print()
                
            elif o_choice == "5":
                break  

    elif user_type == "3":
        print("Bye for now!")
        break  

    else:
        print("ERROR: Invalid choice!")
        print()

       

